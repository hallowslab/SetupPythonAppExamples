"""
Django settings for djangoexample project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
from pathlib import Path
import sys

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get("DJANGO_DEBUG", "False").lower() in ("1", "true", "yes")
TESTING = "test" in sys.argv
DB_MIGRATION = "makemigrations" in sys.argv or "migrate" in sys.argv

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("DJANGO_SECRET_KEY", None)
if SECRET_KEY is None:
    if DEBUG or TESTING or DB_MIGRATION:
        print("Using fallback insecure key for non-production context.")
        SECRET_KEY = "fallback-insecure-key-?N4!iyeenK2AttfDwS7a"
    else:
        raise ValueError("Secret key can't be loaded")
        sys.exit(1)

ALLOWED_HOSTS = [
    "test.hallows-tech-lab.pt"
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'library',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'djangoexample.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [Path(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'djangoexample.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Load database configs from environment
def _load_env():
    global DATABASES
    MYSQL_HOST = os.environ.get("MYSQL_HOST", None)
    MYSQL_USER = os.environ.get("MYSQL_USER", None)
    MYSQL_PASSWORD = os.environ.get("MYSQL_PASSWORD", None)
    MYSQL_DB = os.environ.get("MYSQL_DB", None)
    if (MYSQL_USER is None or MYSQL_PASSWORD is None or MYSQL_DB is None):
        
        sys.stdout.write(f"Missing environment variables\n User:{MYSQL_USER}\nPassword:Ommited for security\nDatabase:{MYSQL_DB}\n")
        return
    else:
        DATABASES = {
            'default': {
                'ENGINE': 'mysql.connector.django',
                'USER': MYSQL_USER,
                'NAME': MYSQL_DB,
                'PASSWORD': MYSQL_PASSWORD,
                'HOST': ("" if MYSQL_HOST==None else MYSQL_HOST)
            }
        }

_load_env()